#' A generic function for pretty printing in (semi) APA Style
#' @param object An object with a class matching one of the methods
#' @export
#' @docType methods
#' @rdname apastyler-methods
setGeneric(name = "APAStyler",
  def = function(object, ...)
    standardGeneric("APAStyler")
)

#' A generic function for pretty printing in (semi) APA Style
#' @rdname apastyler-methods
#' @aliases APAStyler,lm-method
#' @param object \code{lm} object
#' @param digits The number of digits to round results to. Defaults to 2.
#' @param pdigits The number of digits to use for p values. Defaults to digits + 1 if missing.
#' @param file An optional argument indicating whether the output should be written to a file.
setMethod(APAStyler,
  signature = "lm",
  definition = function(object, digits = 2, pdigits, file, ...) {
    if (missing(pdigits)) pdigits <- digits + 1

    s <- summary(object)
    ctable <- coef(s)
    cstars <- star(ctable[, "Pr(>|t|)"])
    ctable <- format(round(ctable, digits = digits),
      trim = TRUE, nsmall = digits)
    est <- paste(ctable[, "Estimate"], cstars, " (",
      ctable[, "Std. Error"], ")", sep = "")

    ci <- format(round(confint(object, level = 0.95), digits = digits),
      nsmall = digits, trim = TRUE)
    ci <- paste("[", ci[, 1], ", ", ci[, 2], "]", sep = "")


    F <- s$fstatistic
    p <- pf(F[1], F[2], F[3], lower.tail = FALSE)

    r2 <- paste(format(round(s$r.squared, digits = digits),
      nsmall = digits), star(p), sep = "")
    F <- format(round(F, digits = digits), nsmall = digits, trim = TRUE)

    if (identical(round(p[[1]], digits = pdigits), 0)) {
      p <- paste("p < .", paste(rep(0, pdigits - 1), collapse = ""),
        "1", sep = "")
    } else {p <- paste("p = ", format(round(p, digits = pdigits),
      nsmall = pdigits), sep = "")
    }

    F <- c(paste("F(", F[2], ", ", F[3], ") = ", F[1], sep = ""), p)

    out <- matrix(character(1), nrow = length(est) + 2, ncol = 2,
      dimnames = list(c("Constant", rownames(ctable)[-1], "R^2", "F"),
        c("B (SE)", "95% CI")))

    out[1:length(est), 1] <- est
    out[1:length(ci), 2] <- ci
    out["R^2", 1] <- r2
    out["F", ] <- F

    if (!missing(file)) write.table(out, file = file, ...)
    print(noquote(out))
    return(invisible(out))
  }
)

#' A generic function for pretty printing in (semi) APA Style
#' @rdname apastyler-methods
#' @aliases APAStyler,mira-method
#' @param object \code{mira} object
#' @param lmobject an lm object the degrees of freedom of which can be used for conservative F tests
#' @param digits The number of digits to round results to. Defaults to 2.
#' @param pdigits The number of digits to use for p values. Defaults to digits + 1 if missing.
#' @param file An optional argument indicating whether the output should be written to a file.
setMethod(APAStyler,
  signature = "mira",
  definition = function(object, lmobject, digits = 2, pdigits, file, ...) {
    if (!inherits(object[["analyses"]][[1]], "lm"))
      stop("mira object must use a model that inherits from class 'lm' such as 'lm' or 'glm'")

    if (missing(pdigits)) pdigits <- digits + 1
    F <- r2 <- NULL

    ctable <- summary(pool(object))
    cstars <- star(ctable[, "Pr(>|t|)"])
    ctable <- format(round(ctable, digits = digits),
      trim = TRUE, nsmall = digits)

    est <- paste(ctable[, "est"], cstars, " (",
      ctable[, "se"], ")", sep = "")

    ci <- paste("[", ctable[, "lo 95"], ", ", ctable[, "hi 95"], "]", sep = "")

    out <- matrix(character(1), nrow = length(est), ncol = 2,
      dimnames = list(c("Constant", rownames(ctable)[-1]),
        c("B (SE)", "95% CI")))
    out[1:length(est), 1] <- est
    out[1:length(ci), 2] <- ci

    if (identical(class(object[["analyses"]][[1]]), "lm")) {
      r2 <- pool.r.squared(object)[, "est"]

      if (!missing(lmobject)) {
        df <- summary(lmobject)$fstatistic[2:3]
        F <- f.r2(r2, df[1], df[2])[1:3]
        p <- f.r2(r2, df[1], df[2])[4]

        r2 <- c(paste(format(round(r2, digits = digits),
          nsmall = digits), star(p), sep = ""), "")

        F <- format(round(F, digits = digits), nsmall = digits, trim = TRUE)

        if (identical(round(p[[1]], digits = pdigits), 0)) {
          p <- paste("p < .", paste(rep(0, pdigits - 1), collapse = ""),
            "1", sep = "")
        } else {p <- paste("p = ", format(round(p, digits = pdigits),
          nsmall = pdigits), sep = "")
        }

        F <- c(paste("F(", F[2], ", ", F[3], ") = ", F[1], sep = ""), p)
        warning("Using the degrees of freedom for the listwise deleted model for the F test and R^2 significance.",
          call. = FALSE)
      } else {
        r2 <- c(paste(format(round(r2, digits = digits),
         nsmall = digits), sep = ""), "")
      }
      out <- rbind(out, "R^2" = r2, "F" = F)
    } else if (!missing(lmobject)) warning("lmobject argument ignored")

    if (!missing(file)) write.table(out, file = file, ...)

    print(noquote(out))

    return(invisible(out))
  }
)

#' A generic function for pretty printing in (semi) APA Style
#' @rdname apastyler-methods
#' @aliases APAStyler,SEMSummary-method
#' @param object \code{SEMSummary} object
#' @param digits The number of digits to round results to. Defaults to 2.
#' @param type A character vector giving what to print. Defaults to \sQuote{cov},
#'   the covariances. Other options are \sQuote{cor} and \sQuote{both}.
#' @param stars A logical value whether to include significance values as
#'   stars (*** p < .001, ** p < .01, * p < .05).
#' @param file An optional argument indicating whether the output should be written to a file.
#' @param sep Character what the separator for the table should be. Defaults to tabs.
#' @examples
#' m <- SEMSummary(~., data = mtcars)
#' APAStyler(m, type = "cor", stars = FALSE, file = FALSE)
#' APAStyler(m, type = "cov", stars = FALSE, file = FALSE)
#' APAStyler(m, type = "both", stars = FALSE, file = FALSE)
#' APAStyler(m, type = "cor", stars = TRUE, file = FALSE)
#' APAStyler(m, type = "cov", stars = TRUE, file = FALSE)
#' APAStyler(m, type = "both", stars = TRUE, file = FALSE)
setMethod(APAStyler,
  signature = "SEMSummary",
  definition = function(object, digits = 2, type = c("cov", "cor", "both"), stars = FALSE,
      file = ifelse(.Platform$OS.type == "windows", "clipboard", FALSE), sep = "\t", ...) {

    type <- match.arg(type)
    mat <- switch(type,
      cov = {
        m <- format(round(object$Sigma, digits = digits), nsmall = digits)
        if (stars) m[] <- paste0(m, star(object$pvalue))
        m[lower.tri(m)] <- ""
        diag(m) <- " - "
        m
      },
      cor = {
        m <- format(round(object$sSigma, digits = digits), nsmall = digits)
        if (stars) m[] <- paste0(m, star(object$pvalue))
        m[lower.tri(m)] <- ""
        diag(m) <- " - "
        m
      },
      both = {
        mv <- format(round(object$Sigma, digits = digits), nsmall = digits)
        mc <- format(round(object$sSigma, digits = digits), nsmall = digits)

        if (stars) {
          mv[] <- paste0(mv, star(object$pvalue))
          mc[] <- paste0(mc, star(object$pvalue))
        }

        #mv[] <- as.character(mv)
        mv[lower.tri(mv)] <- mc[lower.tri(mc)]
        diag(mv) <- " - "
        mv
      })


    X <- lapply(object[c("n", "nmissing", "mu", "stdev", "coverage")],
      round, digits = digits)

    out.table <- matrix("", nrow = length(object$names), ncol = 3 + length(object$names))
    rownames(out.table) <- paste(seq_along(object$names), ". ", object$names, sep = '')
    colnames(out.table) <- c("N", "M", "SD", paste(seq_along(object$names), ".", sep = ''))

    out.table[, "N"] <- round(X$n - X$nmissing, digits = digits)
    out.table[, "M"] <- format(X$mu, nsmall = digits)
    out.table[, "SD"] <- format(X$stdev, nsmall = digits)
    out.table[, -c(1:3)] <- mat

    mtable <- X$coverage
    mtable[] <- as.character(mtable)
    mtable[lower.tri(mtable)] <- ""

    if (!identical(FALSE, file)) {
      copyout <- cbind(rownames(out.table), out.table)
      copyout <- rbind(colnames(copyout), copyout)
      write.table(copyout, file = file, sep = sep, row.names = FALSE, col.names = FALSE, ...)
    }
    output <- list(table = out.table, coverage = mtable)

    print(noquote(out.table))
    cat("\nPercentage of coverage for each pairwise covariance or correlation\n\n")
    print(noquote(mtable))

    return(invisible(output))
  })



#' Function to simplify converting p-values to asterisks
#'
#' @param x p values to convert to stars
#' @return stars
#' @author Joshua Wiley
#' @keywords internal
#' @examples
#' # make me!
star <- function(x) {
  symnum(x, legend = FALSE, na = "",
    cutpoints = c(0, 0.001, 0.01, 0.05, 1),
    symbols = c("***", "**", "*", ""))
}


#' Calculate F and p-value from the R2
#'
#' @param r2 r squareds
#' @param numdf numerator degrees of freedom
#' @param dendf denominator degrees of freedom
#' @return a vector
#' @author Joshua Wiley
#' @keywords internal
#' @examples
#' # make me!
f.r2 <- function(r2, numdf, dendf) {
  F <- (dendf/numdf) * (-r2/(r2 - 1))
  p <- pf(F, df1 = numdf, df2 = dendf, lower.tail = FALSE)
  c(F = F[[1]], numdf, dendf, p = p[[1]])
}
